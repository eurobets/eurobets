type User
@model
@key(name: "byPlayer", fields: ["id"])
@auth(rules: [{ allow: owner, ownerField: "id", operations: [delete, update] }])
{
  id: ID
  username: String!
  email: String!
  firstName: String
  lastName: String
  players: [Player] @connection(keyName: "byPlayer", fields: ["id"])
  bets: [Bet] @connection(keyName: "byUser", fields: ["id"])
}

type Player
  @model(queries: null)
  @key(name: "byRoom", fields: ["roomId", "owner"])
  @key(name: "byPlayer", fields: ["owner", "roomId"])
  @auth(rules: [{ allow: owner, operations: [create] }])
{
  id: ID!
  roomId: ID!
  owner: ID
  room: Room! @connection(fields: ["roomId"])
  user: User! @connection(fields: ["owner"])
}

type Room
@model
@key(name: "byUser", fields: ["owner"])
@auth(rules: [{ allow: owner, operations: [create, update, delete] }])
{
  id: ID!
  name: String!
  owner: ID
  bets: [Bet] @connection(keyName: "byRoom", fields: ["id"])
  players: [Player] @connection(keyName: "byRoom", fields: ["id"]),
  playoffCoefficient: Int!,
  scorePoints: Int!
  differencePoints: Int!
  resultPoints: Int!
  promotionPoints: Int!
}

type Bet
@model
@key(name: "byRoom", fields: ["roomId"])
@key(name: "byUser", fields: ["owner"])
@auth(rules: [{ allow: owner, operations: [create, update, delete] }])
{
  id: ID!
  roomId: ID!
  game: Int!
  homeScore: Int!
  awayScore: Int!
  homeWins: Boolean
  awayWins: Boolean
  owner: ID
}
